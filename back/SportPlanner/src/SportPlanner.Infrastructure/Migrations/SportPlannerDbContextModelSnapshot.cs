// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportPlanner.Infrastructure.Data;

#nullable disable

namespace SportPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(SportPlannerDbContext))]
    partial class SportPlannerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportPlanner.Domain.Entities.AgeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer")
                        .HasColumnName("max_age");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer")
                        .HasColumnName("min_age");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_age_groups");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_age_groups_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_age_groups_is_active");

                    b.HasIndex("Sport", "SortOrder")
                        .HasDatabaseName("ix_age_groups_sport_sort_order");

                    b.HasIndex("Sport", "MinAge", "MaxAge")
                        .HasDatabaseName("ix_age_groups_sport_min_age_max_age");

                    b.ToTable("age_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111001"),
                            Code = "ALEVIN_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 10,
                            MinAge = 8,
                            Name = "Alevín",
                            SortOrder = 1,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111002"),
                            Code = "BENJAMIN_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 12,
                            MinAge = 11,
                            Name = "Benjamín",
                            SortOrder = 2,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111003"),
                            Code = "INFANTIL_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 14,
                            MinAge = 13,
                            Name = "Infantil",
                            SortOrder = 3,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111004"),
                            Code = "CADETE_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 16,
                            MinAge = 15,
                            Name = "Cadete",
                            SortOrder = 4,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111005"),
                            Code = "JUVENIL_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 18,
                            MinAge = 17,
                            Name = "Juvenil",
                            SortOrder = 5,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111006"),
                            Code = "JUNIOR_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 20,
                            MinAge = 19,
                            Name = "Junior",
                            SortOrder = 6,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111007"),
                            Code = "SENIOR_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 34,
                            MinAge = 21,
                            Name = "Senior",
                            SortOrder = 7,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111008"),
                            Code = "VETERANO_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 50,
                            MinAge = 35,
                            Name = "Veterano",
                            SortOrder = 8,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222001"),
                            Code = "MINI_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 10,
                            MinAge = 8,
                            Name = "Mini",
                            SortOrder = 1,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222002"),
                            Code = "INFANTIL_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 13,
                            MinAge = 11,
                            Name = "Infantil",
                            SortOrder = 2,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222003"),
                            Code = "CADETE_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 16,
                            MinAge = 14,
                            Name = "Cadete",
                            SortOrder = 3,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222004"),
                            Code = "JUVENIL_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 18,
                            MinAge = 17,
                            Name = "Juvenil",
                            SortOrder = 4,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222005"),
                            Code = "SENIOR_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 40,
                            MinAge = 19,
                            Name = "Senior",
                            SortOrder = 5,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333001"),
                            Code = "INFANTIL_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 12,
                            MinAge = 10,
                            Name = "Infantil",
                            SortOrder = 1,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333002"),
                            Code = "CADETE_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 15,
                            MinAge = 13,
                            Name = "Cadete",
                            SortOrder = 2,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333003"),
                            Code = "JUVENIL_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 18,
                            MinAge = 16,
                            Name = "Juvenil",
                            SortOrder = 3,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333004"),
                            Code = "SENIOR_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 40,
                            MinAge = 19,
                            Name = "Senior",
                            SortOrder = 4,
                            Sport = "Handball"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_genders");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_genders_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_genders_is_active");

                    b.ToTable("genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "M",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Equipos masculinos",
                            IsActive = true,
                            Name = "Masculino"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "F",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Equipos femeninos",
                            IsActive = true,
                            Name = "Femenino"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "X",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Equipos de género mixto",
                            IsActive = true,
                            Name = "Mixto"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<int?>("DefaultDurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("default_duration_seconds");

                    b.Property<string>("DefaultIntensity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("default_intensity");

                    b.Property<int?>("DefaultReps")
                        .HasColumnType("integer")
                        .HasColumnName("default_reps");

                    b.Property<int?>("DefaultSets")
                        .HasColumnType("integer")
                        .HasColumnName("default_sets");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<string>("Instructions")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("MarketplaceUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("marketplace_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ownership");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_exercises");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Exercises_CategoryId");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("IX_Exercises_TypeId");

                    b.HasIndex("Ownership", "IsActive")
                        .HasDatabaseName("IX_Exercises_Ownership_IsActive")
                        .HasFilter("subscription_id IS NULL");

                    b.HasIndex("SubscriptionId", "IsActive")
                        .HasDatabaseName("IX_Exercises_SubscriptionId_IsActive");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ExerciseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_exercise_categories");

                    b.HasIndex("Sport", "IsActive")
                        .HasDatabaseName("IX_ExerciseCategories_Sport_IsActive");

                    b.ToTable("exercise_categories", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ExerciseObjective", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_id");

                    b.HasKey("ExerciseId", "ObjectiveId")
                        .HasName("pk_exercise_objectives");

                    b.HasIndex("ObjectiveId")
                        .HasDatabaseName("IX_ExerciseObjectives_ObjectiveId");

                    b.ToTable("exercise_objectives", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ExerciseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresDuration")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_duration");

                    b.Property<bool>("RequiresReps")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_reps");

                    b.Property<bool>("RequiresSets")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_sets");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_exercise_types");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ExerciseTypes_IsActive");

                    b.ToTable("exercise_types", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.MarketplaceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("average_rating");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystemOfficial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_official");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<Guid?>("PublishedBySubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("published_by_subscription_id");

                    b.Property<Guid?>("SourceEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_entity_id");

                    b.Property<string>("SourceOwnership")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_ownership");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<int>("TotalDownloads")
                        .HasColumnType("integer")
                        .HasColumnName("total_downloads");

                    b.Property<int>("TotalRatings")
                        .HasColumnType("integer")
                        .HasColumnName("total_ratings");

                    b.Property<int>("TotalViews")
                        .HasColumnType("integer")
                        .HasColumnName("total_views");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_marketplace_items");

                    b.HasIndex("PublishedBySubscriptionId")
                        .HasDatabaseName("IX_MarketplaceItems_PublishedBySubscriptionId");

                    b.HasIndex("SourceEntityId")
                        .HasDatabaseName("IX_MarketplaceItems_SourceEntityId");

                    b.HasIndex("Sport", "TotalDownloads")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_MarketplaceItems_Sport_Downloads");

                    b.HasIndex("Sport", "IsSystemOfficial", "AverageRating")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("IX_MarketplaceItems_Sport_Official_Rating")
                        .HasFilter("is_system_official = true");

                    b.HasIndex("Sport", "Type", "AverageRating")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("IX_MarketplaceItems_Sport_Type_Rating");

                    b.ToTable("marketplace_items", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.MarketplaceRating", b =>
                {
                    b.Property<Guid>("MarketplaceItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("marketplace_item_id");

                    b.Property<Guid>("RatedBySubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("rated_by_subscription_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("Stars")
                        .HasColumnType("integer")
                        .HasColumnName("stars");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("MarketplaceItemId", "RatedBySubscriptionId")
                        .HasName("pk_marketplace_ratings");

                    b.HasIndex("RatedBySubscriptionId")
                        .HasDatabaseName("IX_MarketplaceRatings_RatedBySubscriptionId");

                    b.ToTable("marketplace_ratings", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("ObjectiveCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_category_id");

                    b.Property<Guid?>("ObjectiveSubcategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_subcategory_id");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ownership");

                    b.Property<Guid?>("SourceMarketplaceItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_marketplace_item_id");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_objectives");

                    b.HasIndex("ObjectiveCategoryId")
                        .HasDatabaseName("IX_Objectives_ObjectiveCategoryId");

                    b.HasIndex("ObjectiveSubcategoryId")
                        .HasDatabaseName("IX_Objectives_ObjectiveSubcategoryId");

                    b.HasIndex("SourceMarketplaceItemId")
                        .HasDatabaseName("IX_Objectives_SourceMarketplaceItemId");

                    b.HasIndex("Ownership", "Sport")
                        .HasDatabaseName("IX_Objectives_Ownership_Sport")
                        .HasFilter("subscription_id IS NULL");

                    b.HasIndex("SubscriptionId", "Sport", "IsActive")
                        .HasDatabaseName("IX_Objectives_SubscriptionId_Sport_IsActive");

                    b.ToTable("objectives", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ObjectiveCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_objective_categories");

                    b.HasIndex("Sport")
                        .HasDatabaseName("IX_ObjectiveCategories_Sport");

                    b.HasIndex("Sport", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ObjectiveCategories_Sport_Name");

                    b.ToTable("objective_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444401"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Individual",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444402"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Colectiva",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444403"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Táctica",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444404"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Física",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("55555501-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Individual",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("55555502-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Colectiva",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("55555503-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Táctica",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("55555504-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Física",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("66666601-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Individual",
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("66666602-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Colectiva",
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("66666603-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Táctica",
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("66666604-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Física",
                            Sport = "Handball"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ObjectiveSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("ObjectiveCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_objective_subcategories");

                    b.HasIndex("ObjectiveCategoryId")
                        .HasDatabaseName("IX_ObjectiveSubcategories_ObjectiveCategoryId");

                    b.HasIndex("ObjectiveCategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ObjectiveSubcategories_CategoryId_Name");

                    b.ToTable("objective_subcategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440101"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444401")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440102"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444401")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440201"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444402")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440202"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444402")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440301"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444403")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440302"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444403")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440303"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Transición",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444403")
                        },
                        new
                        {
                            Id = new Guid("55550101-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("55555501-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550102-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("55555501-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550201-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("55555502-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550202-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("55555502-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550301-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("55555503-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550302-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("55555503-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550303-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Transición",
                            ObjectiveCategoryId = new Guid("55555503-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("66660101-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("66666601-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660102-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("66666601-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660201-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("66666602-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660202-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("66666602-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660301-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("66666603-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660302-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("66666603-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660303-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Transición",
                            ObjectiveCategoryId = new Guid("66666603-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.PlanObjective", b =>
                {
                    b.Property<Guid>("TrainingPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_plan_id");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_id");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("TargetSessions")
                        .HasColumnType("integer")
                        .HasColumnName("target_sessions");

                    b.HasKey("TrainingPlanId", "ObjectiveId")
                        .HasName("pk_plan_objectives");

                    b.HasIndex("ObjectiveId")
                        .HasDatabaseName("IX_PlanObjectives_ObjectiveId");

                    b.HasIndex("TrainingPlanId")
                        .HasDatabaseName("IX_PlanObjectives_TrainingPlanId");

                    b.HasIndex("TrainingPlanId", "Priority")
                        .HasDatabaseName("IX_PlanObjectives_TrainingPlanId_Priority");

                    b.ToTable("plan_objectives", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.TrainingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("MarketplaceItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("marketplace_item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_training_plans");

                    b.HasIndex("MarketplaceItemId")
                        .HasDatabaseName("IX_TrainingPlans_MarketplaceItemId");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("IX_TrainingPlans_SubscriptionId");

                    b.HasIndex("SubscriptionId", "IsActive")
                        .HasDatabaseName("IX_TrainingPlans_SubscriptionId_IsActive");

                    b.ToTable("training_plans", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("difficulty");

                    b.Property<int?>("EstimatedDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_duration_minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("MarketplaceUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("marketplace_user_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notes");

                    b.Property<Guid?>("ObjectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_id");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ownership");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_workouts");

                    b.HasIndex("ObjectiveId")
                        .HasDatabaseName("IX_Workouts_ObjectiveId");

                    b.HasIndex("Ownership", "IsActive")
                        .HasDatabaseName("IX_Workouts_Ownership_IsActive")
                        .HasFilter("subscription_id IS NULL");

                    b.HasIndex("SubscriptionId", "IsActive")
                        .HasDatabaseName("IX_Workouts_SubscriptionId_IsActive");

                    b.ToTable("workouts", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.WorkoutExercise", b =>
                {
                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_id");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("Intensity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("intensity");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<int?>("RestSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("rest_seconds");

                    b.Property<int?>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("sets");

                    b.HasKey("WorkoutId", "ExerciseId")
                        .HasName("pk_workout_exercises");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("IX_WorkoutExercises_ExerciseId");

                    b.HasIndex("WorkoutId", "Order")
                        .HasDatabaseName("IX_WorkoutExercises_WorkoutId_Order");

                    b.ToTable("workout_exercises", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.WorkoutObjective", b =>
                {
                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_id");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("objective_id");

                    b.HasKey("WorkoutId", "ObjectiveId")
                        .HasName("pk_workout_objectives");

                    b.HasIndex("ObjectiveId")
                        .HasDatabaseName("IX_WorkoutObjectives_ObjectiveId");

                    b.ToTable("workout_objectives", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer")
                        .HasColumnName("max_teams");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer")
                        .HasColumnName("max_users");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Sport")
                        .HasColumnType("integer")
                        .HasColumnName("sport");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_subscriptions_owner_id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.SubscriptionUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("granted_by");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("text")
                        .HasColumnName("removed_by");

                    b.Property<int>("RoleInSubscription")
                        .HasColumnType("integer")
                        .HasColumnName("role_in_subscription");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_users");

                    b.HasIndex("SubscriptionId", "RemovedAt")
                        .HasDatabaseName("ix_subscription_users_subscription_id_removed_at")
                        .HasFilter("removed_at IS NULL");

                    b.HasIndex("SubscriptionId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_subscription_users_subscription_id_user_id");

                    b.ToTable("subscription_users", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgeGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("age_group_id");

                    b.Property<bool>("AllowMixedGender")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_mixed_gender");

                    b.Property<string>("CoachName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("coach_name");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentPlayersCount")
                        .HasColumnType("integer")
                        .HasColumnName("current_players_count");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("gender_id");

                    b.Property<string>("HomeVenue")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("home_venue");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastMatchDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_match_date");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("max_players");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Season")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("season");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.Property<Guid>("TeamCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("AgeGroupId")
                        .HasDatabaseName("IX_Teams_AgeGroupId");

                    b.HasIndex("GenderId")
                        .HasDatabaseName("IX_Teams_GenderId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Teams_IsActive");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("IX_Teams_SubscriptionId");

                    b.HasIndex("TeamCategoryId")
                        .HasDatabaseName("IX_Teams_TeamCategoryId");

                    b.HasIndex("SubscriptionId", "IsActive")
                        .HasDatabaseName("IX_Teams_SubscriptionId_IsActive");

                    b.HasIndex("SubscriptionId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Teams_SubscriptionId_Name");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.TeamCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sport");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_team_categories");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_team_categories_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_team_categories_is_active");

                    b.HasIndex("Sport", "SortOrder")
                        .HasDatabaseName("ix_team_categories_sport_sort_order");

                    b.ToTable("team_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111101"),
                            Code = "NIVEL_A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría principal - máximo nivel competitivo",
                            IsActive = true,
                            Name = "Nivel A",
                            SortOrder = 1,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111102"),
                            Code = "NIVEL_B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Segunda categoría - nivel competitivo medio",
                            IsActive = true,
                            Name = "Nivel B",
                            SortOrder = 2,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111103"),
                            Code = "ESCUELA",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de formación y aprendizaje",
                            IsActive = true,
                            Name = "Escuela",
                            SortOrder = 3,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111104"),
                            Code = "ELITE",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de élite - máximo rendimiento",
                            IsActive = true,
                            Name = "Elite",
                            SortOrder = 4,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222201"),
                            Code = "NIVEL_A_BASKET",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría principal - máximo nivel competitivo",
                            IsActive = true,
                            Name = "Nivel A",
                            SortOrder = 1,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222202"),
                            Code = "NIVEL_B_BASKET",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Segunda categoría - nivel competitivo medio",
                            IsActive = true,
                            Name = "Nivel B",
                            SortOrder = 2,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222203"),
                            Code = "ESCUELA_BASKET",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de formación y aprendizaje",
                            IsActive = true,
                            Name = "Escuela",
                            SortOrder = 3,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333301"),
                            Code = "NIVEL_A_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría principal - máximo nivel competitivo",
                            IsActive = true,
                            Name = "Nivel A",
                            SortOrder = 1,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333302"),
                            Code = "NIVEL_B_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Segunda categoría - nivel competitivo medio",
                            IsActive = true,
                            Name = "Nivel B",
                            SortOrder = 2,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333303"),
                            Code = "ESCUELA_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de formación y aprendizaje",
                            IsActive = true,
                            Name = "Escuela",
                            SortOrder = 3,
                            Sport = "Handball"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Exercise", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.ExerciseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_exercises_exercise_categories_category_id");

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_exercises_subscriptions_subscription_id");

                    b.HasOne("SportPlanner.Domain.Entities.Planning.ExerciseType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_exercises_exercise_types_type_id");

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ExerciseObjective", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercise_objectives_exercises_exercise_id");

                    b.HasOne("SportPlanner.Domain.Entities.Planning.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exercise_objectives_objectives_objective_id");

                    b.Navigation("Exercise");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.MarketplaceItem", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("PublishedBySubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_marketplace_items_subscriptions_published_by_subscription_id");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.MarketplaceRating", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.MarketplaceItem", "MarketplaceItem")
                        .WithMany("Ratings")
                        .HasForeignKey("MarketplaceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_marketplace_ratings_marketplace_items_marketplace_item_id");

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("RatedBySubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_marketplace_ratings_subscriptions_rated_by_subscription_id");

                    b.Navigation("MarketplaceItem");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Objective", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.ObjectiveCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ObjectiveCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_objectives_objective_categories_objective_category_id");

                    b.HasOne("SportPlanner.Domain.Entities.Planning.ObjectiveSubcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("ObjectiveSubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_objectives_objective_subcategories_objective_subcategory_id");

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_objectives_subscriptions_subscription_id");

                    b.OwnsMany("SportPlanner.Domain.Entities.Planning.ObjectiveTechnique", "Techniques", b1 =>
                        {
                            b1.Property<Guid>("ObjectiveId")
                                .HasColumnType("uuid")
                                .HasColumnName("objective_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<int>("Order")
                                .HasColumnType("integer")
                                .HasColumnName("order");

                            b1.HasKey("ObjectiveId", "Id")
                                .HasName("pk_objective_techniques");

                            b1.ToTable("objective_techniques", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ObjectiveId")
                                .HasConstraintName("fk_objective_techniques_objectives_objective_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Subcategory");

                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ObjectiveSubcategory", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.ObjectiveCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ObjectiveCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_objective_subcategories_objective_categories_objective_cate");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.PlanObjective", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_plan_objectives_objectives_objective_id");

                    b.HasOne("SportPlanner.Domain.Entities.Planning.TrainingPlan", "TrainingPlan")
                        .WithMany("Objectives")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plan_objectives_training_plans_training_plan_id");

                    b.Navigation("Objective");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.TrainingPlan", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_plans_subscriptions_subscription_id");

                    b.OwnsOne("SportPlanner.Domain.ValueObjects.TrainingSchedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("TrainingPlanId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("HoursPerDay")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hours_per_day");

                            b1.Property<int>("TotalWeeks")
                                .HasColumnType("integer")
                                .HasColumnName("total_weeks");

                            b1.Property<string>("TrainingDays")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("training_days");

                            b1.HasKey("TrainingPlanId");

                            b1.ToTable("training_plans");

                            b1.WithOwner()
                                .HasForeignKey("TrainingPlanId")
                                .HasConstraintName("fk_training_plans_training_plans_id");
                        });

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Workout", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_workouts_objectives_objective_id");

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_workouts_subscriptions_subscription_id");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.WorkoutExercise", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_workout_exercises_exercises_exercise_id");

                    b.HasOne("SportPlanner.Domain.Entities.Planning.Workout", "Workout")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_exercises_workouts_workout_id");

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.WorkoutObjective", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_objectives_objectives_objective_id");

                    b.HasOne("SportPlanner.Domain.Entities.Planning.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_objectives_workouts_workout_id");

                    b.Navigation("Objective");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.SubscriptionUser", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_users_subscriptions_subscription_id");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Team", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_teams_age_groups_age_group_id");

                    b.HasOne("SportPlanner.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_teams_genders_gender_id");

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_subscriptions_subscription_id");

                    b.HasOne("SportPlanner.Domain.Entities.TeamCategory", "Category")
                        .WithMany()
                        .HasForeignKey("TeamCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_teams_team_categories_team_category_id");

                    b.Navigation("AgeGroup");

                    b.Navigation("Category");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.MarketplaceItem", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.TrainingPlan", b =>
                {
                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Workout", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}

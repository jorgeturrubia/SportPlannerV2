// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportPlanner.Infrastructure.Data;

#nullable disable

namespace SportPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(SportPlannerDbContext))]
    [Migration("20250930055158_AddTrainingPlanEntities")]
    partial class AddTrainingPlanEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportPlanner.Domain.Entities.AgeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Sport", "SortOrder");

                    b.HasIndex("Sport", "MinAge", "MaxAge");

                    b.ToTable("age_groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111001"),
                            Code = "ALEVIN_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 10,
                            MinAge = 8,
                            Name = "Alevín",
                            SortOrder = 1,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111002"),
                            Code = "BENJAMIN_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 12,
                            MinAge = 11,
                            Name = "Benjamín",
                            SortOrder = 2,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111003"),
                            Code = "INFANTIL_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 14,
                            MinAge = 13,
                            Name = "Infantil",
                            SortOrder = 3,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111004"),
                            Code = "CADETE_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 16,
                            MinAge = 15,
                            Name = "Cadete",
                            SortOrder = 4,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111005"),
                            Code = "JUVENIL_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 18,
                            MinAge = 17,
                            Name = "Juvenil",
                            SortOrder = 5,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111006"),
                            Code = "JUNIOR_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 20,
                            MinAge = 19,
                            Name = "Junior",
                            SortOrder = 6,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111007"),
                            Code = "SENIOR_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 34,
                            MinAge = 21,
                            Name = "Senior",
                            SortOrder = 7,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111008"),
                            Code = "VETERANO_FOOTBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 50,
                            MinAge = 35,
                            Name = "Veterano",
                            SortOrder = 8,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222001"),
                            Code = "MINI_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 10,
                            MinAge = 8,
                            Name = "Mini",
                            SortOrder = 1,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222002"),
                            Code = "INFANTIL_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 13,
                            MinAge = 11,
                            Name = "Infantil",
                            SortOrder = 2,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222003"),
                            Code = "CADETE_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 16,
                            MinAge = 14,
                            Name = "Cadete",
                            SortOrder = 3,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222004"),
                            Code = "JUVENIL_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 18,
                            MinAge = 17,
                            Name = "Juvenil",
                            SortOrder = 4,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222005"),
                            Code = "SENIOR_BASKETBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 40,
                            MinAge = 19,
                            Name = "Senior",
                            SortOrder = 5,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333001"),
                            Code = "INFANTIL_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 12,
                            MinAge = 10,
                            Name = "Infantil",
                            SortOrder = 1,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333002"),
                            Code = "CADETE_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 15,
                            MinAge = 13,
                            Name = "Cadete",
                            SortOrder = 2,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333003"),
                            Code = "JUVENIL_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 18,
                            MinAge = 16,
                            Name = "Juvenil",
                            SortOrder = 3,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333004"),
                            Code = "SENIOR_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            IsActive = true,
                            MaxAge = 40,
                            MinAge = 19,
                            Name = "Senior",
                            SortOrder = 4,
                            Sport = "Handball"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "M",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Equipos masculinos",
                            IsActive = true,
                            Name = "Masculino"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "F",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Equipos femeninos",
                            IsActive = true,
                            Name = "Femenino"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "X",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Equipos de género mixto",
                            IsActive = true,
                            Name = "Mixto"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ObjectiveCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ObjectiveSubcategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SourceMarketplaceItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveCategoryId")
                        .HasDatabaseName("IX_Objectives_ObjectiveCategoryId");

                    b.HasIndex("ObjectiveSubcategoryId")
                        .HasDatabaseName("IX_Objectives_ObjectiveSubcategoryId");

                    b.HasIndex("SourceMarketplaceItemId")
                        .HasDatabaseName("IX_Objectives_SourceMarketplaceItemId");

                    b.HasIndex("Ownership", "Sport")
                        .HasDatabaseName("IX_Objectives_Ownership_Sport")
                        .HasFilter("subscription_id IS NULL");

                    b.HasIndex("SubscriptionId", "Sport", "IsActive")
                        .HasDatabaseName("IX_Objectives_SubscriptionId_Sport_IsActive");

                    b.ToTable("objectives", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ObjectiveCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Sport")
                        .HasDatabaseName("IX_ObjectiveCategories_Sport");

                    b.HasIndex("Sport", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ObjectiveCategories_Sport_Name");

                    b.ToTable("objective_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444401"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Individual",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444402"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Colectiva",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444403"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Táctica",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444404"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Física",
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("55555501-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Individual",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("55555502-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Colectiva",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("55555503-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Táctica",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("55555504-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Física",
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("66666601-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Individual",
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("66666602-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Técnica Colectiva",
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("66666603-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Táctica",
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("66666604-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Física",
                            Sport = "Handball"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ObjectiveSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ObjectiveCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectiveCategoryId")
                        .HasDatabaseName("IX_ObjectiveSubcategories_ObjectiveCategoryId");

                    b.HasIndex("ObjectiveCategoryId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ObjectiveSubcategories_CategoryId_Name");

                    b.ToTable("objective_subcategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440101"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444401")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440102"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444401")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440201"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444402")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440202"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444402")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440301"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444403")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440302"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444403")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444440303"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Transición",
                            ObjectiveCategoryId = new Guid("44444444-4444-4444-4444-444444444403")
                        },
                        new
                        {
                            Id = new Guid("55550101-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("55555501-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550102-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("55555501-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550201-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("55555502-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550202-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("55555502-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550301-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("55555503-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550302-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("55555503-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("55550303-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Transición",
                            ObjectiveCategoryId = new Guid("55555503-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("66660101-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("66666601-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660102-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("66666601-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660201-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("66666602-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660202-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("66666602-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660301-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Ataque",
                            ObjectiveCategoryId = new Guid("66666603-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660302-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Defensa",
                            ObjectiveCategoryId = new Guid("66666603-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("66660303-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Name = "Transición",
                            ObjectiveCategoryId = new Guid("66666603-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.PlanObjective", b =>
                {
                    b.Property<Guid>("TrainingPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("TargetSessions")
                        .HasColumnType("integer");

                    b.HasKey("TrainingPlanId", "ObjectiveId");

                    b.HasIndex("ObjectiveId")
                        .HasDatabaseName("IX_PlanObjectives_ObjectiveId");

                    b.HasIndex("TrainingPlanId")
                        .HasDatabaseName("IX_PlanObjectives_TrainingPlanId");

                    b.HasIndex("TrainingPlanId", "Priority")
                        .HasDatabaseName("IX_PlanObjectives_TrainingPlanId_Priority");

                    b.ToTable("plan_objectives", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.TrainingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MarketplaceItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("MarketplaceItemId")
                        .HasDatabaseName("IX_TrainingPlans_MarketplaceItemId");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("IX_TrainingPlans_SubscriptionId");

                    b.HasIndex("SubscriptionId", "IsActive")
                        .HasDatabaseName("IX_TrainingPlans_SubscriptionId_IsActive");

                    b.ToTable("training_plans", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxTeams")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sport")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.SubscriptionUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("text");

                    b.Property<int>("RoleInSubscription")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId", "RemovedAt")
                        .HasFilter("removed_at IS NULL");

                    b.HasIndex("SubscriptionId", "UserId")
                        .IsUnique();

                    b.ToTable("SubscriptionUsers");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgeGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMixedGender")
                        .HasColumnType("boolean");

                    b.Property<string>("CoachName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CurrentPlayersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("HomeVenue")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastMatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("Season")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AgeGroupId")
                        .HasDatabaseName("IX_Teams_AgeGroupId");

                    b.HasIndex("GenderId")
                        .HasDatabaseName("IX_Teams_GenderId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Teams_IsActive");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("IX_Teams_SubscriptionId");

                    b.HasIndex("TeamCategoryId")
                        .HasDatabaseName("IX_Teams_TeamCategoryId");

                    b.HasIndex("SubscriptionId", "IsActive")
                        .HasDatabaseName("IX_Teams_SubscriptionId_IsActive");

                    b.HasIndex("SubscriptionId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Teams_SubscriptionId_Name");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.TeamCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Sport", "SortOrder");

                    b.ToTable("team_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111101"),
                            Code = "NIVEL_A",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría principal - máximo nivel competitivo",
                            IsActive = true,
                            Name = "Nivel A",
                            SortOrder = 1,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111102"),
                            Code = "NIVEL_B",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Segunda categoría - nivel competitivo medio",
                            IsActive = true,
                            Name = "Nivel B",
                            SortOrder = 2,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111103"),
                            Code = "ESCUELA",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de formación y aprendizaje",
                            IsActive = true,
                            Name = "Escuela",
                            SortOrder = 3,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111104"),
                            Code = "ELITE",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de élite - máximo rendimiento",
                            IsActive = true,
                            Name = "Elite",
                            SortOrder = 4,
                            Sport = "Football"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222201"),
                            Code = "NIVEL_A_BASKET",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría principal - máximo nivel competitivo",
                            IsActive = true,
                            Name = "Nivel A",
                            SortOrder = 1,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222202"),
                            Code = "NIVEL_B_BASKET",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Segunda categoría - nivel competitivo medio",
                            IsActive = true,
                            Name = "Nivel B",
                            SortOrder = 2,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222203"),
                            Code = "ESCUELA_BASKET",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de formación y aprendizaje",
                            IsActive = true,
                            Name = "Escuela",
                            SortOrder = 3,
                            Sport = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333301"),
                            Code = "NIVEL_A_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría principal - máximo nivel competitivo",
                            IsActive = true,
                            Name = "Nivel A",
                            SortOrder = 1,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333302"),
                            Code = "NIVEL_B_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Segunda categoría - nivel competitivo medio",
                            IsActive = true,
                            Name = "Nivel B",
                            SortOrder = 2,
                            Sport = "Handball"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333303"),
                            Code = "ESCUELA_HANDBALL",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Description = "Categoría de formación y aprendizaje",
                            IsActive = true,
                            Name = "Escuela",
                            SortOrder = 3,
                            Sport = "Handball"
                        });
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.Objective", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.ObjectiveCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ObjectiveCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportPlanner.Domain.Entities.Planning.ObjectiveSubcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("ObjectiveSubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("SportPlanner.Domain.Entities.Planning.ObjectiveTechnique", "Techniques", b1 =>
                        {
                            b1.Property<Guid>("ObjectiveId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.HasKey("ObjectiveId", "Id");

                            b1.ToTable("objective_techniques", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ObjectiveId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Subcategory");

                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.ObjectiveSubcategory", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.ObjectiveCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ObjectiveCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.PlanObjective", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Planning.Objective", "Objective")
                        .WithMany()
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportPlanner.Domain.Entities.Planning.TrainingPlan", "TrainingPlan")
                        .WithMany("Objectives")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.TrainingPlan", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SportPlanner.Domain.ValueObjects.TrainingSchedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("TrainingPlanId")
                                .HasColumnType("uuid");

                            b1.Property<string>("HoursPerDay")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hours_per_day");

                            b1.Property<int>("TotalWeeks")
                                .HasColumnType("integer")
                                .HasColumnName("total_weeks");

                            b1.Property<string>("TrainingDays")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("training_days");

                            b1.HasKey("TrainingPlanId");

                            b1.ToTable("training_plans");

                            b1.WithOwner()
                                .HasForeignKey("TrainingPlanId");
                        });

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.SubscriptionUser", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Team", b =>
                {
                    b.HasOne("SportPlanner.Domain.Entities.AgeGroup", "AgeGroup")
                        .WithMany()
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportPlanner.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SportPlanner.Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportPlanner.Domain.Entities.TeamCategory", "Category")
                        .WithMany()
                        .HasForeignKey("TeamCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("Category");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SportPlanner.Domain.Entities.Planning.TrainingPlan", b =>
                {
                    b.Navigation("Objectives");
                });
#pragma warning restore 612, 618
        }
    }
}
